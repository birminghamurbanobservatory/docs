openapi: 3.0.0
info:
  title: REST API
  version: '1.0'
  contact:
    name: Bham Urban Obs Team
    url: 'https://birminghamurbanobservatory.com/contact/'
  description: The Birmingham Urban Observatory REST API is a great way to programically access our data.
servers:
  - url: 'https://api.birminghamurbanobservatory.com'
paths:
  /sensors:
    get:
      summary: Get Sensors
      tags:
        - sensors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/sensors-get-response.body.json'
          headers: {}
      operationId: get-sensors
      description: Get a selection of sensors.
      parameters:
        - schema:
            type: string
          in: query
          name: id__begins
        - schema:
            type: array
          in: query
          name: id__in
          description: comma separated list of sensor IDs for when you require a specific set of sensor.
        - schema:
            type: string
          in: query
          name: hasDeployment
        - schema:
            type: array
          in: query
          name: hasDeployment__in
          description: comma separated list of deployment IDs
        - schema:
            type: boolean
          in: query
          name: hasDeployment__exists
        - schema:
            type: string
          in: query
          name: isHostedBy
        - schema:
            type: boolean
          in: query
          name: isHostedBy_exists
        - schema:
            type: string
          in: query
          name: permanentHost
        - schema:
            type: boolean
          in: query
          name: permanentHost__exists
        - schema:
            type: string
          in: query
          name: search
          description: "Search for matching words within the sensor's id and name. Use full words for best results."
        - schema:
            type: integer
            maximum: 1000
            default: 100
            minimum: 0
          in: query
          name: limit
          description: For pagination
        - schema:
            type: integer
            minimum: 0
            default: 0
          in: query
          name: offset
          description: For pagination
        - schema:
            type: string
            enum:
              - id
            default: id
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: sortOrder
  /deployments:
    get:
      summary: Get Deployments
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/deployment-collection.v1.json
      operationId: get-deployments
      description: Retrieves a collection of deployments.
      parameters:
        - schema:
            type: boolean
          in: query
          name: public
        - schema:
            type: boolean
          in: query
          name: mineOnly
        - schema:
            type: string
          in: query
          name: id__begins
          description: Useful for autocomplete form inputs
        - schema:
            type: integer
            maximum: 1000
            minimum: 0
          in: query
          name: limit
          description: For pagination
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: For pagination
        - schema:
            type: string
            enum:
              - id
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: sortOrder
        - schema:
            type: string
          in: query
          name: search
          description: 'Searches for matching words in the id or name. Tip: provide whole words.'
        - schema:
            type: array
          in: query
          name: id__in
          description: comma separated list of deployment IDs for when you require a specific set of deployments.
    post:
      summary: Create Deployment
      operationId: post-deployments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-get-response.body.json'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-create-request-body.json'
            examples:
              example-1:
                value:
                  id: reference-weather-stations
                  name: Reference weather stations
                  description: High accuracy with regular maintenance
                  public: 'true'
              example-2:
                value:
                  name: Lab Calibration Testing
                  public: false
        description: "When creating a deployment you have the option to specifically define the `id`. If it's not defined, the `id` will be generated from the `name`."
      description: 'Only users that have been granted the special permission `create:deployment` can create a deployment.'
      tags:
        - deployments
  '/deployments/{deploymentId}':
    parameters:
      - schema:
          type: string
        name: deploymentId
        in: path
        required: true
    get:
      summary: Get Deployment
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-get-response.body.json'
      operationId: get-deployments-deploymentId
    patch:
      summary: Update Deployment
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-get-response.body.json'
              examples: {}
      operationId: patch-deployments-deploymentId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/deployment-updates.v1.json
            examples:
              example-1:
                value:
                  name: My now public deployment
                  description: No longer visible by the public
                  public: false
      description: Only defined users with a sufficient access level can update a deployment.
    delete:
      summary: Delete Deployment
      tags:
        - deployments
      responses:
        '204':
          description: No Content
      operationId: delete-deployments-deploymentId
      description: Only defined users with a sufficient access level can delete a deployment.
  /observations:
    get:
      summary: Get Observations
      tags:
        - observations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/observation-collection.v1.json
      operationId: get-observations
      description: Get a collection of observations.
      parameters:
        - schema:
            type: string
          in: query
          name: madeBySensor
        - schema:
            type: array
          in: query
          name: madeBySensor__in
          description: ''
        - schema:
            type: string
          in: query
          name: observedProperty
        - schema:
            type: string
          in: query
          name: unit
        - schema:
            type: array
          in: query
          name: unit__in
        - schema:
            type: boolean
          in: query
          name: unit__exists
        - schema:
            type: string
          in: query
          name: hasFeatureOfInterest
        - schema:
            type: string
          in: query
          name: disciplines__includes
        - schema:
            type: string
          in: query
          name: inDeployment
        - schema:
            type: string
          in: query
          name: inDeployment__in
        - schema:
            type: string
          in: query
          name: ancestorPlatform
        - schema:
            type: string
          in: query
          name: ancestorPlatform__includes
        - schema:
            type: string
          in: query
          name: resultTime__gt
        - schema:
            type: string
          in: query
          name: resultTime__gte
        - schema:
            type: string
          in: query
          name: resultTime__lt
        - schema:
            type: string
          in: query
          name: resultTime__lte
          description: Defaults to the time of the request
        - schema:
            type: boolean
          in: query
          name: flag__exists
        - schema:
            type: integer
            default: 100
            maximum: 1000
            minimum: 0
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
            default: 0
          in: query
          name: offset
        - schema:
            type: string
            enum:
              - sensor
              - timeseries
          in: query
          name: onePer
          description: 'Returns just one observation per sensor/timeseries. I.e. the most recent for each. A "timeseries" is a series of observations, all with the same common properties, i.e. exactly the same values for madeBySensor, observedProperty, usedProcedures, disciplines, unit, hasFeatureOfInterest, inDeployments and ancestorPlatforms.'
        - schema:
            type: string
            enum:
              - timeseries
              - resultTime
            default: resultTime
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sortOrder
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gte
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lte
        - schema:
            type: number
          in: query
          name: height__gt
        - schema:
            type: number
          in: query
          name: height__gte
        - schema:
            type: number
          in: query
          name: height__lt
        - schema:
            type: number
          in: query
          name: height__lte
        - schema:
            type: array
          in: query
          name: proximityCentre
          description: 'proximityRadius must also be provided. Format: lon,lat e.g. proximityCentre=-1.9,52.5  '
        - schema:
            type: number
          in: query
          name: proximityRadius
          description: In metres. proximityCentre must also be provided.
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration
          description: filter by the duration property in the phenomenonTime object. In seconds.
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__gt
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__gte
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__lt
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__lte
        - schema:
            type: string
          in: query
          name: aggregation
          description: 'E.g. aggregation=Instant or aggregation=Average '
        - schema:
            type: array
          in: query
          name: aggregation__in
          description: 'E.g. aggregation__in=Instant,Average'
  '/observations/{observationId}':
    parameters:
      - schema:
          type: string
        name: observationId
        in: path
        required: true
    get:
      summary: Get Observation
      tags:
        - observations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/observation-response.v1.json
      operationId: get-observations-observationId
      description: Get a specific observation
  '/sensors/{sensorId}':
    parameters:
      - schema:
          type: string
        name: sensorId
        in: path
        required: true
    get:
      summary: Get Sensor
      tags:
        - sensors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/sensor-get-response-body.json'
      operationId: get-sensors-sensorId
  /platforms:
    get:
      summary: Get Platforms
      tags:
        - platforms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/platforms-get-response-body.json'
      operationId: get-platforms
      parameters:
        - schema:
            type: string
          in: query
          name: id__begins
        - schema:
            type: string
          in: query
          name: inDeployments__includes
        - schema:
            type: string
          in: query
          name: isHostedBy
        - schema:
            type: array
          in: query
          name: isHostedBy__in
        - schema:
            type: boolean
          in: query
          name: isHostedBy__exists
        - schema:
            type: string
          in: query
          name: ancestorPlatforms__includes
        - schema:
            type: array
          in: query
          name: id__in
          description: comma separated list of platform IDs for when you require a specific set of platforms.
        - schema:
            type: boolean
          in: query
          name: nest
          description: 'If true the hierachical nature of platform and sensor hosting will be conveyed by nesting platforms and sensors within each other. Look for a property called "hosts" (an array). When true the "limit" parameter limits the number of platform "trees" rather than individual platforms.'
        - schema:
            type: integer
            maximum: 1000
            minimum: 0
            default: 100
          in: query
          name: limit
          description: For pagination
        - schema:
            type: integer
            default: 0
            minimum: 0
          in: query
          name: offset
          description: For pagination
        - schema:
            type: string
            enum:
              - id
            default: id
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: sortOrder
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gte
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lte
        - schema:
            type: number
          in: query
          name: height__gt
        - schema:
            type: number
          in: query
          name: height__gte
        - schema:
            type: number
          in: query
          name: height__lt
        - schema:
            type: number
          in: query
          name: height__lte
        - schema:
            type: array
          in: query
          name: proximityCentre
          description: 'proximityRadius must also be provided. Format: lon,lat e.g. proximityCentre=-1.9,52.5  '
        - schema:
            type: number
          in: query
          name: proximityRadius
          description: In metres. proximityCentre must also be provided.
        - schema:
            type: string
          in: query
          name: search
          description: Searchs the id and name properties for any word matches. Try to provide whole words.
    post:
      summary: Create Platform
      tags:
        - platforms
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/platform-get-response-body.json'
      operationId: post-platforms
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.birminghamurbanobservatory.com/schemas/platform-create-request-body.json'
  '/platforms/{platformId}':
    parameters:
      - schema:
          type: string
        name: platformId
        in: path
        required: true
    get:
      summary: Get Platform
      tags:
        - platforms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/platform-get-response-body.json'
      operationId: get-platforms-platformId
      parameters:
        - schema:
            type: boolean
          in: query
          name: nest
          description: When true a hosts array is added to the response with any hosted platforms or sensors
  /timeseries:
    get:
      summary: Get multiple timeseries
      tags:
        - timeseries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/multiple-timeseries-get-response-body.json'
      operationId: get-timeseries
      description: 'Each timeseries describes a series of observations with common properties. All observations within a timeseries will have exactly the same values for the following properties: madeBySensor, hasDeployment, hostedByPath, unit, hasFeatureOfInterest, observedProperty, disciplines, usedProcedures. Typically, at least for observations with a numeric value, you would plot each timeseries as a separate line on a line graph.'
      parameters:
        - schema:
            type: array
          in: query
          name: id__in
          description: comma-separated list of timeseries IDs
        - schema:
            type: string
          in: query
          name: madeBySensor
        - schema:
            type: array
          in: query
          name: madeBySensor__in
          description: comma-separated list of sensor IDs
        - schema:
            type: string
          in: query
          name: observedProperty
        - schema:
            type: string
          in: query
          name: unit
        - schema:
            type: array
          in: query
          name: unit__in
          description: comma-separated list of unit IDs
        - schema:
            type: boolean
          in: query
          name: unit__exists
        - schema:
            type: string
          in: query
          name: hasFeatureOfInterest
        - schema:
            type: string
          in: query
          name: disciplines__includes
        - schema:
            type: string
          in: query
          name: hasDeployment
        - schema:
            type: array
          in: query
          name: hasDeployment__in
          description: comma-separated list of deployment IDs
        - schema:
            type: string
          in: query
          name: ancestorPlatforms
          description: 'For an exact match of the platform "tree". Dot-separated, e.g. parent-platform-id.child-platform-id'
        - schema:
            type: string
          in: query
          name: ancestorPlatforms__includes
        - schema:
            type: string
            format: date-time
          in: query
          name: startDate__gt
        - schema:
            type: string
            format: date-time
          in: query
          name: startDate__gte
        - schema:
            type: string
            format: date-time
          in: query
          name: startDate__lt
        - schema:
            type: string
            format: date-time
          in: query
          name: startDate__lte
        - schema:
            type: string
            format: date-time
          in: query
          name: endDate__gt
        - schema:
            type: string
            format: date-time
          in: query
          name: endDate__gte
        - schema:
            type: string
            format: date-time
          in: query
          name: endDate__lt
        - schema:
            type: string
            format: date-time
          in: query
          name: endDate__lte
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: aggregation
          description: 'E.g. aggregation=Instant or aggregation=Average '
        - schema:
            type: array
          in: query
          name: aggregation__in
          description: 'E.g. aggregation__in=Instant,Average'
  '/timeseries/{timeseriesId}':
    parameters:
      - schema:
          type: string
        name: timeseriesId
        in: path
        required: true
    get:
      summary: Get a timeseries
      tags:
        - timeseries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/single-timeseries-get-response-body.json'
      operationId: get-timeseries-timeseriesId
      description: 'A timeseries describes a series of observations with common properties. All observations within a timeseries will have exactly the same values for the following properties: madeBySensor, hasDeployment, hostedByPath, unit, hasFeatureOfInterest, observedProperty, disciplines, usedProcedures.'
  '/timeseries/{timeseriesId}/observations':
    parameters:
      - schema:
          type: string
        name: timeseriesId
        in: path
        required: true
    get:
      summary: Get timeseries observations
      tags:
        - timeseries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-timeseries-timeseriesId-observations
      description: "Retrieves observations belonging to a specific timeseries. All observations within a timeseries have exactly the same values for the following properties: madeBySensor, hasDeployment, hostedByPath, unit, hasFeatureOfInterest, observedProperty, disciplines, usedProcedures. Therfore there's no need to include these properties for every single observation. By omitting these properties we can drastically reduce the amount of data that needs to be returned. This endpoint is ideal for getting a series of observations for plotting on a line graph (at least for observations whose value is numeric)."
      parameters:
        - schema:
            type: string
          in: query
          name: resultTime__gt
        - schema:
            type: string
          in: query
          name: resultTime__gte
        - schema:
            type: string
          in: query
          name: resultTime__lt
        - schema:
            type: string
          in: query
          name: resultTime__lte
          description: Defaults to the time of the request
        - schema:
            type: boolean
          in: query
          name: flag__exists
        - schema:
            type: integer
            default: 100
            maximum: 1000
            minimum: 0
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
            default: 0
          in: query
          name: offset
        - schema:
            type: string
            enum:
              - timeseries
              - resultTime
            default: resultTime
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sortOrder
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__gte
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lt
        - schema:
            type: number
            maximum: 90
            minimum: -90
          in: query
          name: latitude__lte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__gte
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lt
        - schema:
            type: number
            maximum: 180
            minimum: -180
          in: query
          name: longitude__lte
        - schema:
            type: number
          in: query
          name: height__gt
        - schema:
            type: number
          in: query
          name: height__gte
        - schema:
            type: number
          in: query
          name: height__lt
        - schema:
            type: number
          in: query
          name: height__lte
        - schema:
            type: array
          in: query
          name: proximityCentre
          description: 'proximityRadius must also be provided. Format: lon,lat e.g. proximityCentre=-1.9,52.5  '
        - schema:
            type: number
          in: query
          name: proximityRadius
          description: In metres. proximityCentre must also be provided.
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration
          description: filter by the duration property in the phenomenonTime object. In seconds.
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__gt
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__gte
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__lt
        - schema:
            type: number
            minimum: 0
          in: query
          name: duration__lte
components:
  schemas: {}
  securitySchemes: {}
