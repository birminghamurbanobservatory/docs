openapi: 3.0.0
info:
  title: REST API
  version: '1.0'
  contact:
    name: Bham Urban Obs Team
    url: 'https://birminghamurbanobservatory.com/contact/'
  description: The Birmingham Urban Observatory REST API is a great way to programically access our data.
servers:
  - url: 'https://api.birminghamurbanobservatory.com'
paths:
  /sensors:
    get:
      summary: Get Sensors
      tags:
        - sensors
      responses:
        '200':
          description: OK
      operationId: get-sensors
      description: Get a selection of sensors.
  /deployments:
    get:
      summary: Get Deployments
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/deployment-collection.v1.json
      operationId: get-deployments
      description: Retrieves a collection of deployments.
      parameters:
        - schema:
            type: boolean
          in: query
          name: public
        - schema:
            type: boolean
          in: query
          name: includeAllPublic
        - schema:
            type: string
          in: query
          name: id__begins
          description: Useful for autocomplete form inputs
    post:
      summary: Create Deployment
      operationId: post-deployments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-get-response.body.json'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: ../models/error-response.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-create-request-body.json'
            examples:
              example-1:
                value:
                  id: reference-weather-stations
                  name: Reference weather stations
                  description: High accuracy with regular maintenance
                  public: 'true'
              example-2:
                value:
                  name: Lab Calibration Testing
                  public: false
        description: "When creating a deployment you have the option to specifically define the `id`. If it's not defined, the `id` will be generated from the `name`."
      description: 'Only users that have been granted the special permission `create:deployment` can create a deployment.'
      tags:
        - deployments
  '/deployments/{deploymentId}':
    parameters:
      - schema:
          type: string
        name: deploymentId
        in: path
        required: true
    get:
      summary: Get Deployment
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/deployment-collection.v1.json
      operationId: get-deployments-deploymentId
    patch:
      summary: Update Deployment
      tags:
        - deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'https://api.birminghamurbanobservatory.com/schemas/deployment-get-response.body.json'
              examples: {}
      operationId: patch-deployments-deploymentId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/deployment-updates.v1.json
            examples:
              example-1:
                value:
                  name: My now public deployment
                  description: No longer visible by the public
                  public: false
      description: Only defined users with a sufficient access level can update a deployment.
    delete:
      summary: Delete Deployment
      tags:
        - deployments
      responses:
        '204':
          description: No Content
      operationId: delete-deployments-deploymentId
      description: Only defined users with a sufficient access level can delete a deployment.
  /observations:
    get:
      summary: Get Observations
      tags:
        - observations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/observation-collection.v1.json
      operationId: get-observations
      description: Get a collection of observations.
      parameters:
        - schema:
            type: string
          in: query
          name: madeBySensor
        - schema:
            type: array
          in: query
          name: madeBySensor__in
          description: ''
        - schema:
            type: string
          in: query
          name: observedProperty
        - schema:
            type: string
          in: query
          name: unit
        - schema:
            type: array
          in: query
          name: unit__in
        - schema:
            type: boolean
          in: query
          name: unit__exists
        - schema:
            type: string
          in: query
          name: hasFeatureOfInterest
        - schema:
            type: string
          in: query
          name: discipline__includes
        - schema:
            type: string
          in: query
          name: inDeployment
        - schema:
            type: string
          in: query
          name: inDeployment__in
        - schema:
            type: string
          in: query
          name: ancestorPlatform
        - schema:
            type: string
          in: query
          name: ancestorPlatform__includes
        - schema:
            type: string
          in: query
          name: resultTime__gt
        - schema:
            type: string
          in: query
          name: resultTime_gte
        - schema:
            type: string
          in: query
          name: resultTime_lt
        - schema:
            type: string
          in: query
          name: resultTime_lte
        - schema:
            type: boolean
          in: query
          name: flag_exists
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: onePer
        - schema:
            type: string
            enum:
              - timeseries
              - resultTime
            default: resultTime
          in: query
          name: sortBy
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sortOrder
  '/observations/{observationId}':
    parameters:
      - schema:
          type: string
        name: observationId
        in: path
        required: true
    get:
      summary: Get Observation
      tags:
        - observations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/observation-response.v1.json
      operationId: get-observations-observationId
      description: Get a specific observation
  '/sensors/{sensorId}':
    parameters:
      - schema:
          type: string
        name: sensorId
        in: path
        required: true
    get:
      summary: Get Sensors
      tags:
        - sensors
      responses: {}
      operationId: get-sensors-sensorId
  /platforms:
    get:
      summary: Get Platforms
      tags:
        - platforms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/platforms-get-response-body.v1.json
      operationId: get-platforms
      parameters:
        - schema:
            type: string
          in: query
          name: id__begins
        - schema:
            type: string
          in: query
          name: inDeployment
        - schema:
            type: array
          in: query
          name: inDeployment__in
        - schema:
            type: string
          in: query
          name: isHostedBy
        - schema:
            type: array
          in: query
          name: isHostedBy__in
        - schema:
            type: boolean
          in: query
          name: isHostedBy__exists
        - schema:
            type: string
          in: query
          name: ancestor__Platforms__includes
    post:
      summary: Create Platform
      tags:
        - platforms
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/platform-get-response-body.v1.json
      operationId: post-platforms
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.birminghamurbanobservatory.com/schemas/platform-create-request-body.json'
components:
  schemas: {}
  securitySchemes: {}
